# ~ двоичная инверсия. Значение каждого бита заменяется на противоположное:
x = 100 #01100100
x = ~x 	#10011011
print("x =", ~x, "; ~x =", x)

# & двоичное И:
x = 100		#01100100
y = 75 		#01001011
z = x & y 	#01000000
print("{0:b} & {1:b} = {2:b}".format(x, y, z))

# | двоичное ИЛИ:
x = 100 	#01100100
y = 75 		#01001011
z = x | y 	#01101111
print("{0:b} | {1:b} = {2:b}".format(x, y, z))

# ^ двоичное исключающее ИЛИ:
x = 100		#01100100
y = 250		#11111010
z = x ^ y 	#10011110
print("{0:b} ^ {1:b} = {2:b}".format(x, y, z))

# << сдвиг влево - сдвигает двоичное представление числа влево 
# на один или более разрядов и заполняет разряды справа нулями:
x = 100		#01100100
y = x<<1	#11001000
z = y<<1	#10010000
k = z<<2	#01000000

# >> сдвиг вправо - сдвигает двоичное представление числа вправо
# на один или более разрядов и заполняет разряды слева нулями,
# если число положительное:
x = 100		#01100100
y = x >> 1	#00110010
z = x >> 1	#00011001
k = z >> 2	#00000110
# Если число отрицательное, то разряды слева заполняются единицами:
x = -127	#10000001
y = x >> 1	#11000000
z = x >> 2	#11110000
k = z << 1	#11100000
m = k >> 1	#11110000



